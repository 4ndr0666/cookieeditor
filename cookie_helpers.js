// Utility functions and cookie handling logic

function buildUrl(domain, path, searchUrl) {
    var secure = searchUrl.indexOf("https://") === 0;
    if (domain.substr(0, 1) === '.') {
        domain = domain.substring(1);
    }
    return "http" + (secure ? "s" : "") + "://" + domain + path;
}

function deleteAll(cookieList, searchUrl) {
    for (var i = 0; i < cookieList.length; i++) {
        var curr = cookieList[i];
        var url = buildUrl(curr.domain, curr.path, searchUrl);
        deleteCookie(url, curr.name, curr.storeId);
    }
}

function deleteCookie(url, name, store, callback) {
    chrome.cookies.remove({
        'url': url,
        'name': name,
        'storeId': store
    }, function (details) {
        if (typeof callback === "undefined") {
            return;
        }
        callback(details !== null && details !== undefined);
    });
}

function Filter() {
    var filter = {};
    this.setUrl = function (url) { filter.url = url; };
    this.setDomain = function (domain) { filter.domain = domain; };
    this.setName = function (name) { filter.name = name; };
    this.setSecure = function (secure) { filter.secure = secure; };
    this.setSession = function (session) { filter.session = session; };
    this.getFilter = function () { return filter; };
}

// Additional functionality to protect 'leftCredits' cookie
function protectLeftCreditsCookie(domain) {
    var filter = new Filter();
    filter.setDomain(domain);
    filter.setName('leftCredits');
    var cookieFilter = filter.getFilter();

    chrome.cookies.getAll(cookieFilter, function(cookies) {
        cookies.forEach(function(cookie) {
            if (cookie.name === 'leftCredits' && cookie.value !== '3') {
                chrome.cookies.set({
                    url: buildUrl(cookie.domain, cookie.path, cookie.secure ? 'https://' : 'http://'),
                    name: 'leftCredits',
                    value: '3',
                    domain: cookie.domain,
                    path: cookie.path,
                    secure: cookie.secure,
                    httpOnly: cookie.httpOnly,
                    expirationDate: cookie.expirationDate,
                    storeId: cookie.storeId
                });
            }
        });
    });
}

function cookieForCreationFromFullCookie(fullCookie) {
    var newCookie = {};
    //If no real url is available use: "https://" : "http://" + domain + path
    newCookie.url = "http" + ((fullCookie.secure) ? "s" : "") + "://" + fullCookie.domain + fullCookie.path;
    newCookie.name = fullCookie.name;
    newCookie.value = fullCookie.value;
    if (!fullCookie.hostOnly)
        newCookie.domain = fullCookie.domain;
    newCookie.path = fullCookie.path;
    newCookie.secure = fullCookie.secure;
    newCookie.httpOnly = fullCookie.httpOnly;
    if (!fullCookie.session)
        newCookie.expirationDate = fullCookie.expirationDate;
    newCookie.storeId = fullCookie.storeId;
    return newCookie;
}

function compareCookies(b, a) {
    try {
        if (b.name !== a.name)
            return false;
        if (b.value !== a.value)
            return false;
        if (b.path !== a.path)
            return false;
        if (b.secure !== a.secure)
            return false;
        if (b.httpOnly !== a.httpOnly)
            return false;

        var aHostOnly = !!(a.hostOnly || a.domain === undefined);
        var bHostOnly = !!(b.hostOnly || b.domain === undefined);
        if (aHostOnly !== bHostOnly)
            return false;
        if (!aHostOnly && b.domain !== a.domain)
            return false;

        var aSession = !!(a.session || a.expirationDate === undefined);
        var bSession = !!(b.session || b.expirationDate === undefined);
        if (aSession !== bSession)
            return false;
        if (aSession === false && b.expirationDate !== a.expirationDate)
            return false;
    } catch (e) {
        console.error(e.message);
        return false;
    }
    return true;
}

var cookiesToString = {

    "get": function (cookies, url) {
        if (cookiesToString[preferences.copyCookiesType] !== undefined && cookies.length > 0)
            return cookiesToString[preferences.copyCookiesType](cookies, url);
        else
            return undefined;
    },

    "netscape": function (cookies, url) {
        var string = "";
        string += "# Netscape HTTP Cookie File\n";
        string += "# http://curl.haxx.se/rfc/cookie_spec.html\n";
        string += "# This file was generated by EditThisCookie\n";
        if (url !== undefined)
            string += "# URL: " + url + "\n";
        for (var i = 0; i < cookies.length; i++) {
            cookie = cookies[i];
            string += cookie.domain + "\t" +
                (!cookie.hostOnly).toString().toUpperCase() + "\t" +
                cookie.path + "\t" +
                cookie.secure.toString().toUpperCase() + "\t" +
                (cookie.expirationDate ? Math.round(cookie.expirationDate) : "0") + "\t" +
                cookie.name + "\t" +
                cookie.value + ((i === cookies.length - 1) ? "" : "\n");

        }
        return string;
    },

    "json": function

